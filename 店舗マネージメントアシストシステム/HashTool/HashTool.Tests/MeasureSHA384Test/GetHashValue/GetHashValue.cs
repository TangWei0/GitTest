using System;
using System.Collections.Generic;
using Xunit;
using HashTool.Measurement;
using System.Security.Cryptography;
using LibBaseSequence;

namespace HashTool.Tests.MeasureSHA384Test.GetHashValue
{
    public class TestDataClass : TestBase
    {
        public static Dictionary<byte[], byte[]> TestCase = new Dictionary<byte[], byte[]> {
            { new byte[] { 0x31,0x32,0x33, },  new byte[] { 0x9a,0xa,0x82,0xf0,0xc0,0xcf,0x31,0x47,0xd,0x7a,0xff,0xed,0xe3,0x40,0x6c,0xc9,0xaa,0x84,0x10,0x67,0x15,0x20,0xb7,0x27,0x4,0x4e,0xda,0x15,0xb4,0xc2,0x55,0x32,0xa9,0xb5,0xcd,0x8a,0xaf,0x9c,0xec,0x49,0x19,0xd7,0x62,0x55,0xb6,0xbf,0xb0,0xf, } },
            { new byte[] { 0x61,0x62,0x63, },  new byte[] { 0xcb,0x0,0x75,0x3f,0x45,0xa3,0x5e,0x8b,0xb5,0xa0,0x3d,0x69,0x9a,0xc6,0x50,0x7,0x27,0x2c,0x32,0xab,0xe,0xde,0xd1,0x63,0x1a,0x8b,0x60,0x5a,0x43,0xff,0x5b,0xed,0x80,0x86,0x7,0x2b,0xa1,0xe7,0xcc,0x23,0x58,0xba,0xec,0xa1,0x34,0xc8,0x25,0xa7, } },
            { new byte[] { 0xe3,0x83,0x86,0xe3,0x82,0xb9,0xe3,0x83,0x88, },  new byte[] { 0x35,0x2,0xbb,0x7d,0x7f,0x95,0xec,0x11,0xbf,0xf3,0x6f,0x83,0xde,0xfb,0x88,0xad,0x97,0x9a,0xe6,0x8e,0x99,0x6a,0xba,0xc8,0x33,0xe4,0x91,0xa6,0x8c,0xaa,0x49,0x9d,0x56,0x71,0xe6,0x9a,0x0,0x47,0x9d,0x7b,0x40,0xf0,0xa0,0xa2,0x6,0xb1,0xd1,0x7a, } },
            { new byte[] { 0x20, },  new byte[] { 0x58,0x80,0x16,0xeb,0x10,0x4,0x5d,0xd8,0x58,0x34,0xd6,0x7d,0x18,0x7d,0x6b,0x97,0x85,0x8f,0x38,0xc5,0x8c,0x69,0x3,0x20,0xc4,0xa6,0x4e,0xc,0x2f,0x92,0xee,0xbd,0x9f,0x1b,0xd7,0x4d,0xe2,0x56,0xe8,0x26,0x88,0x15,0x90,0x51,0x59,0x44,0x95,0x66, } },
            { new byte[] { 0x40,0x23,0x24,0x25,0x21, },  new byte[] { 0x63,0xa3,0x37,0xc4,0xe4,0xe6,0x1b,0x16,0xa0,0xc,0xcd,0x14,0x37,0x77,0x32,0xdb,0x8c,0xb4,0x14,0xeb,0x75,0xec,0x44,0xf6,0xac,0xff,0x3e,0x90,0x16,0x3f,0x8e,0x5b,0xd4,0xb8,0xa4,0x36,0x4,0xd6,0x8a,0x93,0xaa,0x6f,0x26,0xcb,0x3b,0x5,0xeb,0x30, } },        
        };

        public static IEnumerable<object[]> SuccessTestData()
        {
            List<object[]> _testData = new List<object[]>();
            foreach(var val in TestCase)
            {
                _testData.Add(new object[] { GetTestName(_testData.Count), val.Key, val.Value});
            }
            return _testData;
        }

        public static IEnumerable<object[]> FaileTestData ( )
        {
            List<object[]> _testData = new List<object[]>( );
            _testData.Add(new object[] { GetTestName(_testData.Count), null, SetMessage()});
            foreach(var val in TestCase)
            {
                _testData.Add(new object[] { GetTestName(_testData.Count), val.Key, SetMessage()});
            }
            return _testData;
        }

        public static string SetMessage( )
        {
            return $"プロセス異常発生 - HashToolの実行異常　SHA384ハッシュ配列出力失敗";
        }
    }

    [Collection("Our Test Collection #1")]
    public class GetHashValue
    {
        // テストメソッド
        [Theory]
        [MemberData(nameof(TestDataClass.SuccessTestData), MemberType = typeof(TestDataClass))]
        public void SuccessTest (string name, byte[] param, byte[] expected )
        {
            Console.WriteLine(name);

            // Arrange
            var SHA384 = new MeasureSHA384( );
            // Act
            var act = SHA384.GetHashValue(param);
            // Assert
            Assert.Equal(expected, act);
        }

        // テストメソッド
        [Theory]
        [MemberData(nameof(TestDataClass.FaileTestData), MemberType = typeof(TestDataClass))]
        public void FaileTest (string name, byte[] param, string errorMessage)
        {
            Console.WriteLine(name);

            // Arrange
            // Act
            var ex = Assert.Throws<ProcessException>(( ) => { GetHashValueStub(param); });
            Assert.Equal(errorMessage, ex.Message);
        }

        public byte[] GetHashValueStub(byte[] byte_value)
        {
            try
            {
                if (byte_value != null) throw new ObjectDisposedException("");
                return new SHA384CryptoServiceProvider().ComputeHash(byte_value);
            }
            catch(Exception ex)
            {
                throw new ProcessException(
                    string.Format("HashToolの実行異常　SHA384ハッシュ配列出力失敗"), ex.InnerException);
            }
        }
    }
}
